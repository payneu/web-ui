/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * PayNeu API
 * OpenAPI spec version: 0.1
 */
import useSwr from 'swr';
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

export interface CreateMerchantDto {
  name: string;
}

export interface CreateInvoiceDto {
  details: string;
  merchant_id: number;
  token_id: number;
  amount: number;
}

export interface CreateTokenDto {
  address: string;
  name: string;
}

export type CheckPayerStatusParams = {
address: string;
invoiceId: number;
};

export type SendInvoicePaymentParams = {
payer: string;
invoiceId: number;
};

export type ConvertThenSendStableParams = {
payer: string;
invoiceId: number;
assetAddress: string;
};

export type MintTokenParams = {
to: string;
amount: number;
tokenAddress: string;
};

export type appControllerGetHelloResponse200 = {
  data: void
  status: 200
}
    
export type appControllerGetHelloResponseSuccess = (appControllerGetHelloResponse200) & {
  headers: Headers;
};
;

export type appControllerGetHelloResponse = (appControllerGetHelloResponseSuccess)

export const getAppControllerGetHelloUrl = () => {


  

  return `https://api-production-d10d.up.railway.app/`
}

export const appControllerGetHello = async ( options?: RequestInit): Promise<appControllerGetHelloResponse> => {
  
  const res = await fetch(getAppControllerGetHelloUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: appControllerGetHelloResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as appControllerGetHelloResponse
}




export const getAppControllerGetHelloKey = () => [`https://api-production-d10d.up.railway.app/`] as const;

export type AppControllerGetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHello>>>
export type AppControllerGetHelloQueryError = Promise<unknown>

export const useAppControllerGetHello = <TError = Promise<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof appControllerGetHello>>, TError> & { swrKey?: Key, enabled?: boolean }, fetch?: RequestInit }
) => {
  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getAppControllerGetHelloKey() : null);
  const swrFn = () => appControllerGetHello(fetchOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

export type appControllerHealthCheckResponse200 = {
  data: void
  status: 200
}
    
export type appControllerHealthCheckResponseSuccess = (appControllerHealthCheckResponse200) & {
  headers: Headers;
};
;

export type appControllerHealthCheckResponse = (appControllerHealthCheckResponseSuccess)

export const getAppControllerHealthCheckUrl = () => {


  

  return `https://api-production-d10d.up.railway.app/health`
}

export const appControllerHealthCheck = async ( options?: RequestInit): Promise<appControllerHealthCheckResponse> => {
  
  const res = await fetch(getAppControllerHealthCheckUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: appControllerHealthCheckResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as appControllerHealthCheckResponse
}




export const getAppControllerHealthCheckKey = () => [`https://api-production-d10d.up.railway.app/health`] as const;

export type AppControllerHealthCheckQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerHealthCheck>>>
export type AppControllerHealthCheckQueryError = Promise<unknown>

export const useAppControllerHealthCheck = <TError = Promise<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof appControllerHealthCheck>>, TError> & { swrKey?: Key, enabled?: boolean }, fetch?: RequestInit }
) => {
  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getAppControllerHealthCheckKey() : null);
  const swrFn = () => appControllerHealthCheck(fetchOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

export type createMerchantResponse201 = {
  data: void
  status: 201
}
    
export type createMerchantResponseSuccess = (createMerchantResponse201) & {
  headers: Headers;
};
;

export type createMerchantResponse = (createMerchantResponseSuccess)

export const getCreateMerchantUrl = () => {


  

  return `https://api-production-d10d.up.railway.app/merchant`
}

export const createMerchant = async (createMerchantDto: CreateMerchantDto, options?: RequestInit): Promise<createMerchantResponse> => {
  
  const res = await fetch(getCreateMerchantUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createMerchantDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: createMerchantResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as createMerchantResponse
}




export const getCreateMerchantMutationFetcher = ( options?: RequestInit) => {
  return (_: Key, { arg }: { arg: CreateMerchantDto }) => {
    return createMerchant(arg, options);
  }
}
export const getCreateMerchantMutationKey = () => [`https://api-production-d10d.up.railway.app/merchant`] as const;

export type CreateMerchantMutationResult = NonNullable<Awaited<ReturnType<typeof createMerchant>>>
export type CreateMerchantMutationError = Promise<unknown>

export const useCreateMerchant = <TError = Promise<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createMerchant>>, TError, Key, CreateMerchantDto, Awaited<ReturnType<typeof createMerchant>>> & { swrKey?: string }, fetch?: RequestInit}
) => {

  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateMerchantMutationKey();
  const swrFn = getCreateMerchantMutationFetcher(fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

export type checkPayerStatusResponse200 = {
  data: void
  status: 200
}
    
export type checkPayerStatusResponseSuccess = (checkPayerStatusResponse200) & {
  headers: Headers;
};
;

export type checkPayerStatusResponse = (checkPayerStatusResponseSuccess)

export const getCheckPayerStatusUrl = (params: CheckPayerStatusParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api-production-d10d.up.railway.app/payment/status?${stringifiedParams}` : `https://api-production-d10d.up.railway.app/payment/status`
}

export const checkPayerStatus = async (params: CheckPayerStatusParams, options?: RequestInit): Promise<checkPayerStatusResponse> => {
  
  const res = await fetch(getCheckPayerStatusUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: checkPayerStatusResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as checkPayerStatusResponse
}




export const getCheckPayerStatusKey = (params: CheckPayerStatusParams,) => [`https://api-production-d10d.up.railway.app/payment/status`, ...(params ? [params]: [])] as const;

export type CheckPayerStatusQueryResult = NonNullable<Awaited<ReturnType<typeof checkPayerStatus>>>
export type CheckPayerStatusQueryError = Promise<unknown>

export const useCheckPayerStatus = <TError = Promise<unknown>>(
  params: CheckPayerStatusParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof checkPayerStatus>>, TError> & { swrKey?: Key, enabled?: boolean }, fetch?: RequestInit }
) => {
  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getCheckPayerStatusKey(params) : null);
  const swrFn = () => checkPayerStatus(params, fetchOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

export type sendInvoicePaymentResponse201 = {
  data: void
  status: 201
}
    
export type sendInvoicePaymentResponseSuccess = (sendInvoicePaymentResponse201) & {
  headers: Headers;
};
;

export type sendInvoicePaymentResponse = (sendInvoicePaymentResponseSuccess)

export const getSendInvoicePaymentUrl = (params: SendInvoicePaymentParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api-production-d10d.up.railway.app/payment/invoice?${stringifiedParams}` : `https://api-production-d10d.up.railway.app/payment/invoice`
}

export const sendInvoicePayment = async (params: SendInvoicePaymentParams, options?: RequestInit): Promise<sendInvoicePaymentResponse> => {
  
  const res = await fetch(getSendInvoicePaymentUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: sendInvoicePaymentResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as sendInvoicePaymentResponse
}




export const getSendInvoicePaymentMutationFetcher = (params: SendInvoicePaymentParams, options?: RequestInit) => {
  return (_: Key, __: { arg: Arguments }) => {
    return sendInvoicePayment(params, options);
  }
}
export const getSendInvoicePaymentMutationKey = (params: SendInvoicePaymentParams,) => [`https://api-production-d10d.up.railway.app/payment/invoice`, ...(params ? [params]: [])] as const;

export type SendInvoicePaymentMutationResult = NonNullable<Awaited<ReturnType<typeof sendInvoicePayment>>>
export type SendInvoicePaymentMutationError = Promise<unknown>

export const useSendInvoicePayment = <TError = Promise<unknown>>(
  params: SendInvoicePaymentParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof sendInvoicePayment>>, TError, Key, Arguments, Awaited<ReturnType<typeof sendInvoicePayment>>> & { swrKey?: string }, fetch?: RequestInit}
) => {

  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getSendInvoicePaymentMutationKey(params);
  const swrFn = getSendInvoicePaymentMutationFetcher(params, fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

export type convertThenSendStableResponse201 = {
  data: void
  status: 201
}
    
export type convertThenSendStableResponseSuccess = (convertThenSendStableResponse201) & {
  headers: Headers;
};
;

export type convertThenSendStableResponse = (convertThenSendStableResponseSuccess)

export const getConvertThenSendStableUrl = (params: ConvertThenSendStableParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api-production-d10d.up.railway.app/payment/asset?${stringifiedParams}` : `https://api-production-d10d.up.railway.app/payment/asset`
}

export const convertThenSendStable = async (params: ConvertThenSendStableParams, options?: RequestInit): Promise<convertThenSendStableResponse> => {
  
  const res = await fetch(getConvertThenSendStableUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: convertThenSendStableResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as convertThenSendStableResponse
}




export const getConvertThenSendStableMutationFetcher = (params: ConvertThenSendStableParams, options?: RequestInit) => {
  return (_: Key, __: { arg: Arguments }) => {
    return convertThenSendStable(params, options);
  }
}
export const getConvertThenSendStableMutationKey = (params: ConvertThenSendStableParams,) => [`https://api-production-d10d.up.railway.app/payment/asset`, ...(params ? [params]: [])] as const;

export type ConvertThenSendStableMutationResult = NonNullable<Awaited<ReturnType<typeof convertThenSendStable>>>
export type ConvertThenSendStableMutationError = Promise<unknown>

export const useConvertThenSendStable = <TError = Promise<unknown>>(
  params: ConvertThenSendStableParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof convertThenSendStable>>, TError, Key, Arguments, Awaited<ReturnType<typeof convertThenSendStable>>> & { swrKey?: string }, fetch?: RequestInit}
) => {

  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getConvertThenSendStableMutationKey(params);
  const swrFn = getConvertThenSendStableMutationFetcher(params, fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

export type createInvoiceResponse201 = {
  data: void
  status: 201
}
    
export type createInvoiceResponseSuccess = (createInvoiceResponse201) & {
  headers: Headers;
};
;

export type createInvoiceResponse = (createInvoiceResponseSuccess)

export const getCreateInvoiceUrl = () => {


  

  return `https://api-production-d10d.up.railway.app/invoice`
}

export const createInvoice = async (createInvoiceDto: CreateInvoiceDto, options?: RequestInit): Promise<createInvoiceResponse> => {
  
  const res = await fetch(getCreateInvoiceUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createInvoiceDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: createInvoiceResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as createInvoiceResponse
}




export const getCreateInvoiceMutationFetcher = ( options?: RequestInit) => {
  return (_: Key, { arg }: { arg: CreateInvoiceDto }) => {
    return createInvoice(arg, options);
  }
}
export const getCreateInvoiceMutationKey = () => [`https://api-production-d10d.up.railway.app/invoice`] as const;

export type CreateInvoiceMutationResult = NonNullable<Awaited<ReturnType<typeof createInvoice>>>
export type CreateInvoiceMutationError = Promise<unknown>

export const useCreateInvoice = <TError = Promise<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createInvoice>>, TError, Key, CreateInvoiceDto, Awaited<ReturnType<typeof createInvoice>>> & { swrKey?: string }, fetch?: RequestInit}
) => {

  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateInvoiceMutationKey();
  const swrFn = getCreateInvoiceMutationFetcher(fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

export type findAllInvoiceResponse200 = {
  data: void
  status: 200
}
    
export type findAllInvoiceResponseSuccess = (findAllInvoiceResponse200) & {
  headers: Headers;
};
;

export type findAllInvoiceResponse = (findAllInvoiceResponseSuccess)

export const getFindAllInvoiceUrl = () => {


  

  return `https://api-production-d10d.up.railway.app/invoice`
}

export const findAllInvoice = async ( options?: RequestInit): Promise<findAllInvoiceResponse> => {
  
  const res = await fetch(getFindAllInvoiceUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: findAllInvoiceResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as findAllInvoiceResponse
}




export const getFindAllInvoiceKey = () => [`https://api-production-d10d.up.railway.app/invoice`] as const;

export type FindAllInvoiceQueryResult = NonNullable<Awaited<ReturnType<typeof findAllInvoice>>>
export type FindAllInvoiceQueryError = Promise<unknown>

export const useFindAllInvoice = <TError = Promise<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof findAllInvoice>>, TError> & { swrKey?: Key, enabled?: boolean }, fetch?: RequestInit }
) => {
  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getFindAllInvoiceKey() : null);
  const swrFn = () => findAllInvoice(fetchOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

export type findInvoiceByIdResponse200 = {
  data: void
  status: 200
}
    
export type findInvoiceByIdResponseSuccess = (findInvoiceByIdResponse200) & {
  headers: Headers;
};
;

export type findInvoiceByIdResponse = (findInvoiceByIdResponseSuccess)

export const getFindInvoiceByIdUrl = (id: string,) => {


  

  return `https://api-production-d10d.up.railway.app/invoice/${id}`
}

export const findInvoiceById = async (id: string, options?: RequestInit): Promise<findInvoiceByIdResponse> => {
  
  const res = await fetch(getFindInvoiceByIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: findInvoiceByIdResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as findInvoiceByIdResponse
}




export const getFindInvoiceByIdKey = (id: string,) => [`https://api-production-d10d.up.railway.app/invoice/${id}`] as const;

export type FindInvoiceByIdQueryResult = NonNullable<Awaited<ReturnType<typeof findInvoiceById>>>
export type FindInvoiceByIdQueryError = Promise<unknown>

export const useFindInvoiceById = <TError = Promise<unknown>>(
  id: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof findInvoiceById>>, TError> & { swrKey?: Key, enabled?: boolean }, fetch?: RequestInit }
) => {
  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(id)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getFindInvoiceByIdKey(id) : null);
  const swrFn = () => findInvoiceById(id, fetchOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

export type createTokenResponse201 = {
  data: void
  status: 201
}
    
export type createTokenResponseSuccess = (createTokenResponse201) & {
  headers: Headers;
};
;

export type createTokenResponse = (createTokenResponseSuccess)

export const getCreateTokenUrl = () => {


  

  return `https://api-production-d10d.up.railway.app/token`
}

export const createToken = async (createTokenDto: CreateTokenDto, options?: RequestInit): Promise<createTokenResponse> => {
  
  const res = await fetch(getCreateTokenUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createTokenDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: createTokenResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as createTokenResponse
}




export const getCreateTokenMutationFetcher = ( options?: RequestInit) => {
  return (_: Key, { arg }: { arg: CreateTokenDto }) => {
    return createToken(arg, options);
  }
}
export const getCreateTokenMutationKey = () => [`https://api-production-d10d.up.railway.app/token`] as const;

export type CreateTokenMutationResult = NonNullable<Awaited<ReturnType<typeof createToken>>>
export type CreateTokenMutationError = Promise<unknown>

export const useCreateToken = <TError = Promise<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createToken>>, TError, Key, CreateTokenDto, Awaited<ReturnType<typeof createToken>>> & { swrKey?: string }, fetch?: RequestInit}
) => {

  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateTokenMutationKey();
  const swrFn = getCreateTokenMutationFetcher(fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

export type mintTokenResponse201 = {
  data: void
  status: 201
}
    
export type mintTokenResponseSuccess = (mintTokenResponse201) & {
  headers: Headers;
};
;

export type mintTokenResponse = (mintTokenResponseSuccess)

export const getMintTokenUrl = (params: MintTokenParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api-production-d10d.up.railway.app/token/faucet?${stringifiedParams}` : `https://api-production-d10d.up.railway.app/token/faucet`
}

export const mintToken = async (params: MintTokenParams, options?: RequestInit): Promise<mintTokenResponse> => {
  
  const res = await fetch(getMintTokenUrl(params),
  {      
    ...options,
    method: 'POST'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: mintTokenResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as mintTokenResponse
}




export const getMintTokenMutationFetcher = (params: MintTokenParams, options?: RequestInit) => {
  return (_: Key, __: { arg: Arguments }) => {
    return mintToken(params, options);
  }
}
export const getMintTokenMutationKey = (params: MintTokenParams,) => [`https://api-production-d10d.up.railway.app/token/faucet`, ...(params ? [params]: [])] as const;

export type MintTokenMutationResult = NonNullable<Awaited<ReturnType<typeof mintToken>>>
export type MintTokenMutationError = Promise<unknown>

export const useMintToken = <TError = Promise<unknown>>(
  params: MintTokenParams, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof mintToken>>, TError, Key, Arguments, Awaited<ReturnType<typeof mintToken>>> & { swrKey?: string }, fetch?: RequestInit}
) => {

  const {swr: swrOptions, fetch: fetchOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getMintTokenMutationKey(params);
  const swrFn = getMintTokenMutationFetcher(params, fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
